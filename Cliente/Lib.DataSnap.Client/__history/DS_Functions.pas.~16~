//
// Created by the DataSnap proxy generator.
// 29/01/2022 18:43:13
//

unit DS_Functions;

interface

uses System.JSON, Data.DBXCommon, Data.DBXClient, Data.DBXDataSnap, Data.DBXJSON, Datasnap.DSProxy, System.Classes, System.SysUtils, Data.DB, Data.SqlExpr, Data.DBXDBReaders, Data.DBXCDSReaders, Data.FireDACJSONReflect, Data.DBXJSONReflect;

type
  TLoginClient = class(TDSAdminClient)
  private
    FAuth_LoginCommand: TDBXCommand;
    FRegister_UserCommand: TDBXCommand;
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function Auth_Login(Username: string; Password: string): Integer;
    function Register_User(Name: string; Username: string; Password: string): string;
  end;

  TMassClient = class(TDSAdminClient)
  private
    FGet_MomentsCommand: TDBXCommand;
    FGet_MusicsCommand: TDBXCommand;
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function Get_Moments: TFDJSONDataSets;
    function Get_Musics(pag: SmallInt; Text: string): TFDJSONDataSets;
  end;

implementation

function TLoginClient.Auth_Login(Username: string; Password: string): Integer;
begin
  if FAuth_LoginCommand = nil then
  begin
    FAuth_LoginCommand := FDBXConnection.CreateCommand;
    FAuth_LoginCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FAuth_LoginCommand.Text := 'TLogin.Auth_Login';
    FAuth_LoginCommand.Prepare;
  end;
  FAuth_LoginCommand.Parameters[0].Value.SetWideString(Username);
  FAuth_LoginCommand.Parameters[1].Value.SetWideString(Password);
  FAuth_LoginCommand.ExecuteUpdate;
  Result := FAuth_LoginCommand.Parameters[2].Value.GetInt32;
end;

function TLoginClient.Register_User(Name: string; Username: string; Password: string): string;
begin
  if FRegister_UserCommand = nil then
  begin
    FRegister_UserCommand := FDBXConnection.CreateCommand;
    FRegister_UserCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FRegister_UserCommand.Text := 'TLogin.Register_User';
    FRegister_UserCommand.Prepare;
  end;
  FRegister_UserCommand.Parameters[0].Value.SetWideString(Name);
  FRegister_UserCommand.Parameters[1].Value.SetWideString(Username);
  FRegister_UserCommand.Parameters[2].Value.SetWideString(Password);
  FRegister_UserCommand.ExecuteUpdate;
  Result := FRegister_UserCommand.Parameters[3].Value.GetWideString;
end;

constructor TLoginClient.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;

constructor TLoginClient.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;

destructor TLoginClient.Destroy;
begin
  FAuth_LoginCommand.DisposeOf;
  FRegister_UserCommand.DisposeOf;
  inherited;
end;

function TMassClient.Get_Moments: TFDJSONDataSets;
begin
  if FGet_MomentsCommand = nil then
  begin
    FGet_MomentsCommand := FDBXConnection.CreateCommand;
    FGet_MomentsCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FGet_MomentsCommand.Text := 'TMass.Get_Moments';
    FGet_MomentsCommand.Prepare;
  end;
  FGet_MomentsCommand.ExecuteUpdate;
  if not FGet_MomentsCommand.Parameters[0].Value.IsNull then
  begin
    FUnMarshal := TDBXClientCommand(FGet_MomentsCommand.Parameters[0].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FGet_MomentsCommand.Parameters[0].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FGet_MomentsCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TMassClient.Get_Musics(pag: SmallInt; Text: string): TFDJSONDataSets;
begin
  if FGet_MusicsCommand = nil then
  begin
    FGet_MusicsCommand := FDBXConnection.CreateCommand;
    FGet_MusicsCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FGet_MusicsCommand.Text := 'TMass.Get_Musics';
    FGet_MusicsCommand.Prepare;
  end;
  FGet_MusicsCommand.Parameters[0].Value.SetInt16(pag);
  FGet_MusicsCommand.Parameters[1].Value.SetWideString(Text);
  FGet_MusicsCommand.ExecuteUpdate;
  if not FGet_MusicsCommand.Parameters[2].Value.IsNull then
  begin
    FUnMarshal := TDBXClientCommand(FGet_MusicsCommand.Parameters[2].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FGet_MusicsCommand.Parameters[2].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FGet_MusicsCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

constructor TMassClient.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;

constructor TMassClient.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;

destructor TMassClient.Destroy;
begin
  FGet_MomentsCommand.DisposeOf;
  FGet_MusicsCommand.DisposeOf;
  inherited;
end;

end.

