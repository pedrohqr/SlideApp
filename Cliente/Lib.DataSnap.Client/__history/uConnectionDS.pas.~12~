unit uConnectionDS;

interface

uses
  Data.SqlExpr, System.Classes, Data.FireDACJSONReflect, FireDAC.Stan.StorageBin,
   FireDAC.Stan.StorageJSON, FireDAC.Comp.Client;

  //This class is responsible for connect to Server and consume your functions

type
  TConnDS = class(TComponent)
  private
    DSC : TSQLConnection;
    FDStan : TFDStanStorageBinLink;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;

    function AuthUser(UserName, Password : String): Boolean;
  end;

implementation

uses
  System.IniFiles, Lib_General, System.SysUtils, DS_Functions, Data.DB;

{ ConnDS }

/// <summary> Send the username and password from user and verify authentication.
/// If have permission, return you ID on MemTable.
/// </summary>
function TConnDS.AuthUser(UserName, Password: String): Boolean;
var
  LoginClient : TLoginClient;
  DS          : TFDJSONDataSets;
  MT          : TFDMemTable;
begin
  Result := False;
  MT := TFDMemTable.Create(nil);
  DS := TFDJSONDataSets.Create;
  LoginClient := TLoginClient.Create(DSC.DBXConnection);
  try
    MT.AppendData(TFDJSONDataSetsReader.GetListValue(LoginClient.Auth_Login(UserName, Password), 0));
    if not MT.IsEmpty then
      Result := True;
  finally
    FreeAndNil(MT);
    FreeAndNil(DS);
    FreeAndNil(LoginClient);
  end;
end;

/// <summary> Create SQLConnection and load IP and PORT default form ini file.
/// </summary>
constructor TConnDS.Create(AOwner: TComponent);
var
  ini : TIniFile;
begin
  inherited Create(AOwner);
  DSC    := TSQLConnection.Create(AOwner);
  FDStan := TFDStanStorageBinLink.Create(AOwner);
  ini    := TIniFile.Create(Path_Ini);
  try

    DSC.DriverName := 'DataSnap';
    DSC.LoginPrompt := False;
    with DSC.Params do
    begin
      Values['CommunicationProtocol']    := 'tcp/ip';
      Values['BufferKBSize']             := '32';
      Values['DatasnapContext']          := 'datasnap/';
//      Values['DSAuthenticationUser']     := 'admin';
//      Values['DSAuthenticationPassword'] := 'adm10';
      Values['DSProxyPort']              := '8888';
      Values['HostName']                 := ini.ReadString('SERVER', 'IP', '192.168.100.217');
      Values['Port']                     := ini.ReadString('SERVER', 'PORT', '211');
    end;

    DSC.Connected := True;
  finally
    FreeAndNil(ini);
  end;
end;

destructor TConnDS.Destroy;
begin
  if DSC.Connected then
    DSC.Connected := False;

  if Assigned(FDStan) then
    FreeAndNil(FDStan);
  if Assigned(DSC) then
    FreeAndNil(DSC);

  inherited;
end;

end.
