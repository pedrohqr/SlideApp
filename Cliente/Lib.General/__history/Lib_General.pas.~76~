unit Lib_General;

interface

uses
  FMX.ListView.Types;

  function Path_Ini : String;
  function PathSlide: String;
  procedure Vibrate(const Time : Integer);
  procedure OpenYouTubeVideo(ALink : String);
  procedure StoragePermission(ACreateDB : Boolean = False);
  procedure ReadPhoneStatePermission;
  procedure ShareWhatsApp(FileName: String);
  procedure OpenPPTX(const AFileName: string);
  function GetTextHeight(const D: TListItemText; const Width: single;
                          const Text: string): Integer;
  function Encrypt(Text : String; Key : Integer):String;
  function Decrypt(Text : String; Key : Integer):String;
  function DeviceID : String;

implementation

uses
  {$IFDEF MSWINDOWS}
  Winapi.ShellAPI, Winapi.Windows,
  {$ENDIF}
  {$IFDEF ANDROID}
  Androidapi.Jni.Os,
  Androidapi.jni.GraphicsContentViewText,
  Androidapi.Helpers,
  Androidapi.JNIBridge,
  IdURI,
  Androidapi.JNI.App,
  FMX.Platform.Android,
  Androidapi.JNI.JavaTypes,
  Androidapi.JNI.Net,
  System.Permissions,
  Androidapi.Jni.Support,
  Androidapi.JNI.Telephony,
  Androidapi.JNI.Provider,
  FMX.Helpers.Android,
  {$ENDIF}
  {$IFDEF IOS}
  iOSAPi.UIkit,
  {$ENDIF}
  System.SysUtils, System.IOUtils, FMX.Dialogs, FMX.TextLayout, System.Types,
  uScript_DBL, System.IniFiles;

  //var
//  Device: UIDevice;
//
//
//Device := TUIDevice.Wrap(TUIDevice.OCClass.currentDevice);
//ID := string(Device.identifierForVendor.UUIDString.UTF8String);

/// <summary> Returns the path of ini file in Android and Windows.
/// </summary>
function Path_Ini : String;
var
  path: String;
begin
  {$IFDEF ANDROID}
    path := System.IOUtils.TPath.GetDocumentsPath;
  {$ENDIF}
  {$IFDEF MSWINDOWS}
//    path := ExtractFilePath(ParamStr(0));
  Path := ExtractFilePath(TPath.GetDocumentsPath)+'SlideApp';
  {$ENDIF}

  if not TDirectory.Exists(path) then
    TDirectory.CreateDirectory(path);

  path := System.IOUtils.TPath.Combine(path, 'config.ini');

  if not FileExists(path) then
    FileCreate(path);

  Result := path;

  if not FileExists(Result) then
    raise Exception.Create('CLIENTE: Arquivo "config.ini" não encontrado em: ' + Result);
end;

/// <summary> Does vibrate in the Android. Time in miliseconds.
/// </summary>
procedure Vibrate(const Time : Integer);
{$IFDEF ANDROID}
var
  Vibrator : JVibrator;
{$ENDIF}
begin
{$IFDEF ANDROID}
  Vibrator := TJVibrator.Wrap((TAndroidHelper.Context.getSystemService(TJContext.JavaClass.VIBRATOR_SERVICE) as ILocalObject).getObjectID);
  Vibrator.vibrate(Time);
{$ENDIF}
end;

/// <summary> Open the video on YouTube. Works on Android and Windows.
/// </summary>
procedure OpenYouTubeVideo(ALink : String);
  {$IFDEF ANDROID}
var
  Intent : JIntent;
  {$ENDIF}
begin
  {$IFDEF MSWINDOWS}
   ShellExecute(0, 'OPEN', PChar(ALink), '', '', SW_SHOWNORMAL);
  {$ENDIF}
  {$IFDEF ANDROID}
    try
      Intent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_VIEW);
      Intent.setData(TJnet_Uri.JavaClass.parse(StringToJString(TIdURI.URLEncode(ALink))));
      TAndroidHelper.Activity.StartActivity(Intent);
    except on E: Exception do
      ShowMessage(E.Message);
    end;
  {$ENDIF}
end;

/// <summary> Request to the user permission to save the file
/// </summary>
procedure StoragePermission(ACreateDB : Boolean = False);
begin
  {$IFDEF ANDROID}
  PermissionsService.RequestPermissions(
  [JStringToString(TJManifest_permission.JavaClass.READ_EXTERNAL_STORAGE),
  JStringToString(TJManifest_permission.JavaClass.WRITE_EXTERNAL_STORAGE)],
  procedure(const APermissions: TArray<string>; const AGrantResults: TArray<TPermissionStatus>)
  begin
    if (Length(AGrantResults) = 2) and (AGrantResults[0] = TPermissionStatus.Granted) and
    (AGrantResults[1] = TPermissionStatus.Granted) then
      if ACreateDB then
        Create_DataBase;
  end);
  {$ENDIF}
  {$IFDEF MSWINDOWS}
    if ACreateDB then
      Create_DataBase;
  {$ENDIF}
end;

/// <summary> Return the path of the .pptx will be saved in client application
/// </summary>
function PathSlide: String;
var
  Path : String;
begin
  {$IFDEF MSWINDOWS}
  Path := ExtractFilePath(ParamStr(0)) + 'reports'+PathDelim;
  if ForceDirectories(Path) then
    Result := Path
  else
    raise Exception.Create('Erro - Não foi possível criar o diretório: '+Path);
  {$ENDIF}
  {$IFDEF ANDROID}
  Path := System.IOUtils.TPath.Combine(System.IOUtils.TPath.GetSharedDocumentsPath, 'SlideApp');
  if not TDirectory.Exists(path) then
    TDirectory.CreateDirectory(path);
  Result := path;
  {$ENDIF}
end;

/// <summary> Share the file in WhatsApp
/// </summary>
procedure ShareWhatsApp(FileName: String);
{$IFDEF ANDROID}
var
   Intent: JIntent;
   FileUri: Jnet_Uri;
   ListArqs: JArrayList;
{$ENDIF}
begin
{$IFDEF ANDROID}
   ListArqs := TJArrayList.Create;
   FileUri := TJNet_Uri.JavaClass.fromFile(TJFile.JavaClass.init(StringToJString(FileName)));
   ListArqs.Add(0, FileUri); // if intend to send more file change the index (default 0)
   try
      Intent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_GET_CONTENT);
      Intent.setDataAndTypeAndNormalize(FileUri, StringToJString('*/*'));
      Intent.putParcelableArrayListExtra(TJIntent.JavaClass.EXTRA_STREAM, ListArqs);
//      Intent.setPackage(StringToJString('com.whatsapp'));
//       Intent.setPackage(StringToJString('com.microsoft.office.powerpoint'));
      Intent.addFlags(TJIntent.JavaClass.FLAG_GRANT_READ_URI_PERMISSION);
      if MainActivity.getPackageManager.queryIntentActivities(Intent, TJPackageManager.JavaClass.MATCH_DEFAULT_ONLY).size > 0 then
        TAndroidHelper.Activity.startActivityForResult(Intent, 0)
      else
        ShowMessage('Não foi encontrado um app padrão para abrir esse tipo de arquivo (.pptx)');
   except
      on E: Exception do
         ShowMessage(E.Message);
   end;
{$ENDIF}
end;

/// <summary> Open the Slide with the default viwer
/// </summary>
procedure OpenPPTX(const AFileName: string);
{$IFDEF ANDROID}
var
  LIntent: JIntent;
  LUri: Jnet_Uri;
{$ENDIF}
begin
{$IFDEF ANDROID}
  try
    LUri := TAndroidHelper.JFileToJURI(TJFile.JavaClass.init(StringToJString(AFileName)));
    LIntent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_VIEW);
    LIntent.setDataAndType(LUri, StringToJString('application/vnd.openxmlformats-officedocument.presentationml.presentation'));
    LIntent.setFlags(TJIntent.JavaClass.FLAG_GRANT_READ_URI_PERMISSION);
    TAndroidHelper.Activity.startActivity(LIntent);
  except on e : exception do
    ShowMessage(e.Message)
  end;
{$ENDIF}
end;

/// <summary> Calculate height for text drawable D
/// </summary>
function GetTextHeight(const D: TListItemText; const Width: single;
                        const Text: string): Integer;
var
  Layout: TTextLayout;
begin
  // Create a TTextLayout to measure text dimensions
  Layout := TTextLayoutManager.DefaultTextLayout.Create;
  try
    Layout.BeginUpdate;
    try
      // Initialize layout parameters with those of the drawable
      Layout.Font.Assign(D.Font);
      Layout.VerticalAlign := D.TextVertAlign;
      Layout.HorizontalAlign := D.TextAlign;
      Layout.WordWrap := D.WordWrap;
      Layout.Trimming := D.Trimming;
      Layout.MaxSize := TPointF.Create(Width, TTextLayout.MaxLayoutSize.Y);
      Layout.Text := Text;
    finally
      Layout.EndUpdate;
    end;
    // Get layout height
    Result := Round(Layout.Height);
    // Add one em to the height
//    Layout.Text := 'm';
//    Result := Result + Round(Layout.Height);
  finally
    Layout.Free;
  end;
end;

/// <summary> Encrypt the password
/// </summary>
function Encrypt(Text : String; Key : Integer):String;
var
  Cont : integer;
  Return : string;
  //retorn ASCII characters
  function AsciiToInt(Caracter: Char): Integer;
  var
    i: Integer;
  begin
    i := 32;
    while i < 255 do begin
      if Chr(i) = Caracter then
        Break;
      i := i + 1;
    end;
    Result := i;
  end;
begin
  if (Trim(Text)=EmptyStr) or (Key=0) then begin
    Result := Text;
  end else begin
    Return := '';
    for Cont:=1 to Length(Text) do begin
      Return := Return + chr(asciitoint(Text[Cont])+Key);
    end;
    Result := Return;
  end;
end;

/// <summary> Decrypt the password
/// </summary>
function Decrypt(Text : String; Key : Integer):String;
var
  Cont : integer;
  Return : string;
  //retorn ASCII characters
  function AsciiToInt(Caracter: Char): Integer;
  var
    i: Integer;
  begin
    i := 32;
    while i < 255 do begin
      if Chr(i) = Caracter then
        Break;
      i := i + 1;
    end;
    Result := i;
  end;
begin
  if (Trim(Text)=EmptyStr) or (Key = 0) then begin
    Result := Text;
  end else begin
    Return := '';
    for cont:=1 to length(Text) do begin
      Return := Return+chr(asciitoint(Text[Cont])-Key);
    end;
    Result := Return;
  end;
end;

/// <summary> Return a device identificator (Android/iOS)
/// </summary>
function DeviceID : String;
{$IFDEF ANDROID}
var
  Obj : JObject;
  TM  : JTelephonyManager;
{$ENDIF}
begin
{$IFDEF ANDROID}
  Obj := SharedActivityContext.getSystemService(TJContext.JavaClass.TELEPHONY_SERVICE);
  if Obj <> nil then
  begin
    TM := TJTelephonyManager.Wrap( (obj as ILocalObject).GetObjectID );
    if TM <> nil then
    Result := JStringToString(tm.getDeviceId);
  end;
  if Result.IsEmpty then
    Result := JStringToString(TJSettings_Secure.JavaClass.getString(SharedActivity.getContentResolver,
    TJSettings_Secure.JavaClass.ANDROID_ID));
{$ENDIF}
end;

/// <summary> Request permission to read DeviceID
/// </summary>
procedure ReadPhoneStatePermission;
{$IFDEF ANDROID}
var
  lPermissionPhoneState : String;
{$ENDIF}
begin
{$IFDEF ANDROID}
  lPermissionPhoneState := JStringToString(TJManifest_permission.JavaClass.READ_PHONE_STATE);
  PermissionsService.RequestPermissions([lPermissionPhoneState], nil, nil);
{$ENDIF}
end;

end.
