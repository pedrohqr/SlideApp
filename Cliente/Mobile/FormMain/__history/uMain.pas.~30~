unit uMain;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Layouts;

type
  TFrm_Main = class(TForm)
    VSB: TVertScrollBox;
    LayoutClient: TLayout;
    procedure FormCreate(Sender: TObject);
    procedure FormFocusChanged(Sender: TObject);
    procedure FormVirtualKeyboardHidden(Sender: TObject;
      KeyboardVisible: Boolean; const Bounds: TRect);
    procedure FormVirtualKeyboardShown(Sender: TObject;
      KeyboardVisible: Boolean; const Bounds: TRect);
    procedure FormKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
  private
    ID_User : Integer;
    ID_Parish_Active : Integer;
    FActiveForm : TForm;
    FLastForm   : TComponentClass;
    FKBBounds   : TRectF;
    FNeedOffset : Boolean;
    procedure CalcContentBoundsProc(Sender: TObject;
                                    var ContentBounds: TRectF);
    procedure RestorePosition;
    procedure UpdateKBBounds;
    procedure CloseForm;
  public
    procedure OpenForm(AForm: TComponentClass); virtual;
  end;

var
  Frm_Main: TFrm_Main;

implementation

{$R *.fmx}

uses System.Math, uLogin, uHome, uNewMass, uSong;

{ TFrm_Main }

procedure TFrm_Main.CalcContentBoundsProc(Sender: TObject;
  var ContentBounds: TRectF);
begin
  if FNeedOffset and (FKBBounds.Top > 0) then
  begin
    ContentBounds.Bottom := Max(ContentBounds.Bottom,
                                2 * ClientHeight - FKBBounds.Top);
  end;
end;

procedure TFrm_Main.FormCreate(Sender: TObject);
begin
  {$IFDEF MSWINDOWS}
  VKAutoShowMode := TVKAutoShowMode.Never;
  {$ELSE IF}
  VKAutoShowMode := TVKAutoShowMode.Always;
  {$ENDIF}
  VSB.OnCalcContentBounds := CalcContentBoundsProc;

  OpenForm(TFrm_Login);
end;

procedure TFrm_Main.FormFocusChanged(Sender: TObject);
begin
  UpdateKBBounds;
end;

procedure TFrm_Main.FormKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
  Shift: TShiftState);
begin
  if Key = vkHardwareBack then
  begin
    Key := 0;
    OpenForm(FLastForm);
  end;
end;

procedure TFrm_Main.FormVirtualKeyboardHidden(Sender: TObject;
  KeyboardVisible: Boolean; const Bounds: TRect);
begin
  FKBBounds.Create(0, 0, 0, 0);
  FNeedOffset := False;
  RestorePosition;
end;

procedure TFrm_Main.FormVirtualKeyboardShown(Sender: TObject;
  KeyboardVisible: Boolean; const Bounds: TRect);
begin
  FKBBounds := TRectF.Create(Bounds);
  FKBBounds.TopLeft := ScreenToClient(FKBBounds.TopLeft);
  FKBBounds.BottomRight := ScreenToClient(FKBBounds.BottomRight);
  UpdateKBBounds;
end;

procedure TFrm_Main.RestorePosition;
begin
  VSB.ViewportPosition := PointF(VSB.ViewportPosition.X, 0);
  LayoutClient.Align := TAlignLayout.Client;
  VSB.RealignContent;
end;

procedure TFrm_Main.UpdateKBBounds;
var
  LFocused : TControl;
  LFocusRect: TRectF;
begin
  FNeedOffset := False;
  if Assigned(Focused) then
  begin
    LFocused := TControl(Focused.GetObject);
    LFocusRect := LFocused.AbsoluteRect;
    LFocusRect.Offset(VSB.ViewportPosition);
    if (LFocusRect.IntersectsWith(TRectF.Create(FKBBounds))) and
       (LFocusRect.Bottom > FKBBounds.Top) then
    begin
      FNeedOffset := True;
      LayoutClient.Align := TAlignLayout.Horizontal;
      VSB.RealignContent;
      Application.ProcessMessages;
      VSB.ViewportPosition :=
        PointF(VSB.ViewportPosition.X,
               LFocusRect.Bottom - FKBBounds.Top);
    end;
  end;
  if not FNeedOffset then
    RestorePosition;
end;

procedure TFrm_main.CloseForm;
var
  I : SmallInt;
begin
  if (FActiveForm <> Nil) then
  begin
    for i := Pred(LayoutClient.ControlsCount) downto 0  do
      LayoutClient.RemoveObject(LayoutClient.Controls[I]);

    FActiveForm := nil;
  end;
end;

procedure TFrm_Main.OpenForm(AForm: TComponentClass);
var
  T : TLayout;
begin

  CloseForm;

  if AForm = TFrm_Login  then
  begin
    Frm_Login := TFrm_Login.Create(Self);
    T := Frm_Login.FindComponent('LayoutClient') as TLayout;
    FActiveForm := Frm_Login;
    Self.OnKeyUp := Frm_Login.OnKeyUp;
    Self.LayoutClient.AddObject(T);
  end
  else
  if AForm = TFrm_Home  then
  begin
    Frm_Home := TFrm_Home.Create(Self);
    T := Frm_Home.FindComponent('LayoutClient') as TLayout;
    FActiveForm := Frm_Home;
    Self.OnKeyUp := Frm_Home.OnKeyUp;
    Self.LayoutClient.AddObject(T);
  end
  else
  if AForm = TFrm_New_Mass  then
  begin
    Frm_New_Mass := TFrm_New_Mass.Create(Self);
    T := Frm_New_Mass.FindComponent('LayoutClient') as TLayout;
    FActiveForm := Frm_New_Mass;
    Self.OnKeyUp := Frm_New_Mass.OnKeyUp;
    Self.OnDestroy := Frm_New_Mass.OnDestroy;
    Self.LayoutClient.AddObject(T);
  end
  else
  if AForm = TFrm_Songs then
  begin
    Frm_Songs := TFrm_Songs.Create(Self);
    T := Frm_Songs.FindComponent('LayoutClient') as TLayout;
    FActiveForm := Frm_Songs;
    Self.OnKeyUp := Frm_Songs.OnKeyUp;
    Self.LayoutClient.AddObject(T);
  end
  else
    raise Exception.Create('Form não existente');
end;

end.
