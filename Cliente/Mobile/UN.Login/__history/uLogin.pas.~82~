unit uLogin;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, 
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  uBase, FMX.Controls.Presentation, FMX.Edit, FMX.Layouts, Data.DBXDataSnap,
  Data.DBXCommon, IPPeerClient, Data.DB, Data.SqlExpr, System.IniFiles,
  System.ImageList, FMX.ImgList;

type
  TFrm_Login = class(TFormBase)
    Edt_Username: TEdit;
    LayoutCenter: TLayout;
    Edt_Password: TEdit;
    btn_sign_in: TButton;
    lbl_username: TLabel;
    lbl_password: TLabel;
    AniIndicator: TAniIndicator;
    cbb_Auth: TCheckBox;
    Edt_IP: TEdit;
    Edt_Port: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    StyleBook1: TStyleBook;
    btn_register: TSpeedButton;
    btn_PW_Show: TSpeedButton;
    Button1: TButton;
    procedure btn_sign_inClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btn_registerClick(Sender: TObject);
    procedure btn_PW_ShowClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    procedure VerifyAuth;
    procedure CreateIni;
  public
    { Public declarations }
  end;

var
  Frm_Login: TFrm_Login;

implementation

{$R *.fmx}

uses uHome, uMain, DS_Functions, uClientModule, FireDAC.Comp.Client,
  Data.FireDACJSONReflect, Lib_General,
  System.Generics.Collections, uMass, uRegister;

procedure TFrm_Login.btn_PW_ShowClick(Sender: TObject);
begin
  inherited;
  case Edt_Password.Password of
    True : Edt_Password.Password := False;
    False : Edt_Password.Password := True;
  end;
end;

procedure TFrm_Login.btn_registerClick(Sender: TObject);
begin
  inherited;
  OpenForm(TFrm_Register);
end;

procedure TFrm_Login.btn_sign_inClick(Sender: TObject);
begin
  inherited;
  AniIndicator.Enabled := True;
  TThread.CreateAnonymousThread(procedure
  var
   Conn : TLoginClient;
   MT : TFDMemTable;
   DS : TFDJSONDataSets;
  begin
    try
      try
        with DM_DataSnap.DSConn do
        begin
          Params.Values['HostName'] := Edt_IP.Text;
          Params.Values['Port'] := Edt_Port.Text;
          if not Connected then
            Connected := True;
        end;

        Conn := TLoginClient.Create(DM_DataSnap.DSConn.DBXConnection);

        DS := Conn.Auth_Login(Trim(Edt_Username.Text), Trim(Edt_Password.Text));

        MT := TFDMemTable.Create(Self);
        MT.AppendData(TFDJSONDataSetsReader.GetListValue(DS, 0));

        if not MT.IsEmpty then //aproved
        begin
          Frm_Main.User_ID := MT.FieldByName('USER_ID').AsInteger;
          Frm_Main.Parishes := TObjectList<TParish>.Create;

          if cbb_Auth.IsChecked then
          begin
            Frm_Main.Ini.WriteString('CLIENT', 'USERNAME', Edt_Username.Text);
            Frm_Main.Ini.WriteString('CLIENT', 'PASSWORD', Encrypt(Edt_Password.Text, 7));
            Frm_Main.Ini.WriteString('CLIENT', 'IP', Edt_IP.Text);
            Frm_Main.Ini.WriteString('CLIENT', 'PORT', Edt_Port.Text);
          end;

          while not MT.Eof do
          begin
            Frm_Main.Parishes.Add(TParish.Create(MT.FieldByName('PARISH_ID').AsInteger,
                                                 MT.FieldByName('PARISH_NAME').AsString));
            Frm_Main.Parish_ID_Active := Frm_Main.Parishes[0].ID;
            MT.Next;
          end;
        end;

        TThread.Synchronize(nil, procedure
        begin
          AniIndicator.Enabled := False;
          if Frm_Main.User_ID <> 0 then
          begin
            OpenForm(TFrm_Home);
          end
          else
            raise Exception.Create('Nome de usuário ou senha inválidos!');
        end);
      except
        on e : Exception do
        TThread.Synchronize(nil, procedure
        begin
          AniIndicator.Enabled := False;
          AniIndicator.Visible := False;
          ShowMessage(e.Message);
        end);
      end;

    finally
      if Assigned(MT) then
        FreeAndNil(MT);
      if DM_DataSnap.DSConn.Connected then
        DM_DataSnap.DSConn.Connected := False;
      FreeAndNil(Conn);
    end;

  end).Start;
end;

procedure TFrm_Login.Button1Click(Sender: TObject);
begin
  inherited;
  ShowMessage(DeviceID);
end;

/// <summary> Verify if the user is athenticated
/// </summary>
procedure TFrm_Login.VerifyAuth;
begin
  if Assigned(Frm_Main.Ini) then
  with Frm_Main do
  begin
    Edt_Username.Text := Ini.ReadString('CLIENT', 'USERNAME', '');
    Edt_Password.Text := Decrypt(Ini.ReadString('CLIENT', 'PASSWORD', ''), 7);
    Edt_IP.Text       := Ini.ReadString('CLIENT', 'IP', '');
    Edt_Port.Text     := Ini.ReadString('CLIENT', 'PORT', '');

    if (Edt_Username.Text <> '') and
       (Edt_Password.Text <> '') and
       (Edt_IP.Text <> '') and
       (Edt_Port.Text <> '') then
    btn_sign_inClick(Self);
  end;
end;

procedure TFrm_Login.CreateIni;
begin
  try
    if not Assigned(Frm_Main.Ini) then
    Frm_Main.Ini := TIniFile.Create(Path_Ini);
  except on e : exception do
    ShowMessage(e.Message)
  end;
end;

procedure TFrm_Login.FormCreate(Sender: TObject);
begin
  inherited;
  StoragePermission(False);
  ReadPhoneStatePermission;
  CreateIni;
  VerifyAuth;
end;

end.
