unit Frm_Management;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ToolWin, Vcl.ComCtrls, Vcl.Menus,
  Vcl.StdCtrls, REST.Types, Data.Bind.Components, Data.Bind.ObjectScope,
  REST.Client, Vcl.WinXCtrls;

type
  TFManagement = class(TForm)
    Client: TRESTClient;
    Request: TRESTRequest;
    Response: TRESTResponse;
    Memo: TMemo;
    Edt_Song: TEdit;
    lbl_song: TLabel;
    lbl_artist: TLabel;
    Edt_Artist: TEdit;
    Btn_Search: TButton;
    lbl_lyrics: TLabel;
    lbl_status: TLabel;
    Animation: TActivityIndicator;
    btn_register_song: TButton;
    lbl_id_art: TLabel;
    lbl_id_song: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Btn_SearchClick(Sender: TObject);
    procedure btn_register_songClick(Sender: TObject);
  private
    function FormatLineBreak(Text: String): String;
    function SearchArtist(Code : String): Integer;
    function SearchSong(Code: String): Integer;
  public
    { Public declarations }
  end;

var
  FManagement: TFManagement;

implementation

{$R *.dfm}

uses Frm_Main, System.JSON, System.Generics.Collections, uDMDB, FireDAC.Stan.Param;

/// <summary> Format the '\n' to lineBrak of Delphi
/// </summary>
function TFManagement.FormatLineBreak(Text : String): String;
var
  I: Integer;
begin
  for I := 2 to Text.Length-4 do
    if (Text[I]='\') and (Text[I+1]='n') then
    begin
      Result := Result + sLineBreak;
      Delete(Text, I, 1);
    end
    else
      Result := Result + Copy(Text, I, 1);
end;

procedure TFManagement.btn_register_songClick(Sender: TObject);
begin
  try
    with DMDB do
    begin
      ClearAllFieldsSP;
      SP.StoredProcName := 'REG_ARTIST';
      SP.Prepare;
      SP.ParamByName('V_PERSON_ID').AsInteger := SearchArtist(lbl_id_art.Caption);
      SP.ParamByName('V_NAME').AsString       := Edt_Artist.Text;
      SP.ParamByName('V_CODE').AsString       := lbl_id_art.Caption;
//      if SP.ParamByName('V_PERSON_ID').AsInteger = 0 then
//        SP.ParamByName('V_PERSON_ID').Clear;
      SP.ExecProc;

      ClearAllFieldsQuery;
      SP.StoredProcName := 'REG_SONG';
      SP.Prepare;
      SP.ParamByName('V_SONG_ID').AsInteger   := SearchSong(lbl_id_song.Caption);
      SP.ParamByName('V_NAME').AsString       := Edt_Song.Text;
      SP.ParamByName('V_LYRICS').AsString     := Memo.Text;
      SP.ParamByName('V_AUDIO_LINK').AsString := '';
      SP.ParamByName('V_ID_ART').AsInteger    := SearchArtist(lbl_id_art.Caption);
      SP.ParamByName('V_CODE').AsString       := lbl_id_song.Caption;

//      if SP.ParamByName('V_SONG_ID').AsInteger = 0 then
//        SP.ParamByName('V_SONG_ID').Clear;

      if Trim(SP.ParamByName('V_AUDIO_LINK').AsString).IsEmpty then
        SP.ParamByName('V_AUDIO_LINK').Clear;

      SP.ExecProc;

      lbl_status.Caption := 'Status: Cadastrado com sucesso';
    end;
  except on e : exception do
    ShowMessage(e.Message);
  end;
end;

procedure TFManagement.Btn_SearchClick(Sender: TObject);
begin
  Animation.Animate := True;
  TThread.CreateAnonymousThread(procedure
  var
    Return : TJSONObject;
  begin
    try
      Request.Params.AddUrlSegment('song', Edt_Song.Text);
      Request.Params.AddUrlSegment('artist', Edt_Artist.Text);
      Request.Execute;
      if Request.Response.StatusCode = 200 then
      begin
        Return := Response.JSONValue as TJSONObject;
        TThread.Synchronize(nil, procedure
        begin
          Animation.Animate := False;
          Memo.Lines.Clear;
          lbl_status.Caption := 'Status: ' + Return.GetValue('type').Value;
          if Return.GetValue('type').Value <> 'song_notfound' then
          begin
            Edt_Song.Text       := ((Return.GetValue('mus') as TJSONArray).Items[0] as TJSONObject).GetValue('name').Value;
            Edt_Artist.Text     := (Return.GetValue('art') as TJSONObject).GetValue('name').Value;
            lbl_id_song.Caption := ((Return.GetValue('mus') as TJSONArray).Items[0] as TJSONObject).GetValue('id').Value;
            lbl_id_art.Caption  := (Return.GetValue('art') as TJSONObject).GetValue('id').Value;
            Memo.Lines.Add(FormatLineBreak(((Return.GetValue('mus') as TJSONArray).Items[0] as TJSONObject).GetValue('text').ToString));
          end;
        end);
      end
      else
      TThread.Synchronize(nil, procedure
      begin
        Animation.Animate := False;
        ShowMessage('Erro: StatusCode '+Request.Response.StatusCode.ToString);
      end);
    except on e : exception do
      TThread.Synchronize(nil, procedure
      begin
        Animation.Animate := False;
        ShowMessage('Erro: '+e.Message);
      end);
    end;
  end).Start;
end;

procedure TFManagement.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FMain.Show;
  Action := TCloseAction.caFree;
  FManagement := nil;
end;

/// <summary> Find for Code of the person and returns the ID
/// </summary>
function TFManagement.SearchArtist(Code: String): Integer;
begin
  with DMDB do
  begin
    ClearAllFieldsQuery;
    Query.SQL.Add('SELECT PERSON_ID FROM PERSON WHERE CODE LIKE :v_code;');
    Query.ParamByName('v_code').AsString := Code;
    Query.Open;
    if Query.FieldByName('PERSON_ID').IsNull then
      Result := 0
    else
      Result := Query.FieldByName('PERSON_ID').AsInteger;
  end;
end;

/// <summary> Find for Code of the song and returns the ID
/// </summary>
function TFManagement.SearchSong(Code: String): Integer;
begin
  with DMDB do
  begin
    ClearAllFieldsQuery;
    Query.SQL.Add('SELECT SONG_ID FROM SONG WHERE CODE LIKE :v_code;');
    Query.ParamByName('v_code').AsString := Code;
    Query.Open;
    if Query.FieldByName('SONG_ID').IsNull then
      Result := 0
    else
      Result := Query.FieldByName('SONG_ID').AsInteger;
  end;
end;


end.
